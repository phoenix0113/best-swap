// tslint:disable
/**
 * Midgard Public API
 * The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * Contact: devs@thorchain.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AssetDetail
 */
export interface AssetDetail {
    /**
     * 
     * @type {string}
     * @memberof AssetDetail
     */
    asset?: string;
    /**
     * 
     * @type {number}
     * @memberof AssetDetail
     */
    dateCreated?: number;
    /**
     * 
     * @type {string}
     * @memberof AssetDetail
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetDetail
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetDetail
     */
    priceRune?: string;
}
/**
 * 
 * @export
 * @interface Coin
 */
export interface Coin {
    /**
     * 
     * @type {string}
     * @memberof Coin
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof Coin
     */
    asset?: string;
}
/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    fee?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    slip?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    stakeUnits?: string;
}
/**
 * 
 * @export
 * @interface EventDetails
 */
export interface EventDetails {
    /**
     * 
     * @type {number}
     * @memberof EventDetails
     */
    date?: number;
    /**
     * 
     * @type {Event}
     * @memberof EventDetails
     */
    events?: Event;
    /**
     * 
     * @type {Gas}
     * @memberof EventDetails
     */
    gas?: Gas;
    /**
     * 
     * @type {string}
     * @memberof EventDetails
     */
    height?: string;
    /**
     * 
     * @type {Tx}
     * @memberof EventDetails
     */
    in?: Tx;
    /**
     * 
     * @type {Option}
     * @memberof EventDetails
     */
    options?: Option;
    /**
     * 
     * @type {Array<Tx>}
     * @memberof EventDetails
     */
    out?: Array<Tx>;
    /**
     * 
     * @type {string}
     * @memberof EventDetails
     */
    pool?: string;
    /**
     * 
     * @type {string}
     * @memberof EventDetails
     */
    status?: EventDetailsStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof EventDetails
     */
    type?: EventDetailsTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EventDetailsStatusEnum {
    Success = 'success',
    Refund = 'refund'
}
/**
    * @export
    * @enum {string}
    */
export enum EventDetailsTypeEnum {
    Swap = 'swap',
    Stake = 'stake',
    Unstake = 'unstake',
    Rewards = 'rewards',
    Add = 'add',
    Pool = 'pool',
    Gas = 'gas',
    Refund = 'refund'
}

/**
 * 
 * @export
 * @interface Gas
 */
export interface Gas {
    /**
     * 
     * @type {string}
     * @memberof Gas
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof Gas
     */
    asset?: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    error: string;
}
/**
 * 
 * @export
 * @interface Option
 */
export interface Option {
    /**
     * 
     * @type {string}
     * @memberof Option
     */
    asymmetry?: string;
    /**
     * 
     * @type {string}
     * @memberof Option
     */
    priceTarget?: string;
    /**
     * 
     * @type {string}
     * @memberof Option
     */
    withdrawBasisPoints?: string;
}
/**
 * 
 * @export
 * @interface PoolDetail
 */
export interface PoolDetail {
    /**
     * 
     * @type {string}
     * @memberof PoolDetail
     */
    asset?: string;
    /**
     * Total current Asset balance
     * @type {string}
     * @memberof PoolDetail
     */
    assetDepth?: string;
    /**
     * Asset return on investment
     * @type {string}
     * @memberof PoolDetail
     */
    assetROI?: string;
    /**
     * Total Asset staked
     * @type {string}
     * @memberof PoolDetail
     */
    assetStakedTotal?: string;
    /**
     * Number of RUNE->ASSET transactions
     * @type {string}
     * @memberof PoolDetail
     */
    buyAssetCount?: string;
    /**
     * Average sell Asset fee size for RUNE->ASSET (in ASSET)
     * @type {string}
     * @memberof PoolDetail
     */
    buyFeeAverage?: string;
    /**
     * Total fees (in Asset)
     * @type {string}
     * @memberof PoolDetail
     */
    buyFeesTotal?: string;
    /**
     * Average trade slip for RUNE->ASSET in %
     * @type {string}
     * @memberof PoolDetail
     */
    buySlipAverage?: string;
    /**
     * Average Asset buy transaction size for (RUNE->ASSET) (in ASSET)
     * @type {string}
     * @memberof PoolDetail
     */
    buyTxAverage?: string;
    /**
     * Total Asset buy volume (RUNE->ASSET) (in Asset)
     * @type {string}
     * @memberof PoolDetail
     */
    buyVolume?: string;
    /**
     * Total depth of both sides (in RUNE)
     * @type {string}
     * @memberof PoolDetail
     */
    poolDepth?: string;
    /**
     * Average pool fee
     * @type {string}
     * @memberof PoolDetail
     */
    poolFeeAverage?: string;
    /**
     * Total fees
     * @type {string}
     * @memberof PoolDetail
     */
    poolFeesTotal?: string;
    /**
     * Pool ROI (average of RUNE and Asset ROI)
     * @type {string}
     * @memberof PoolDetail
     */
    poolROI?: string;
    /**
     * Pool ROI over 12 months
     * @type {string}
     * @memberof PoolDetail
     */
    poolROI12?: string;
    /**
     * Average pool slip
     * @type {string}
     * @memberof PoolDetail
     */
    poolSlipAverage?: string;
    /**
     * Rune value staked Total
     * @type {string}
     * @memberof PoolDetail
     */
    poolStakedTotal?: string;
    /**
     * Average pool transaction
     * @type {string}
     * @memberof PoolDetail
     */
    poolTxAverage?: string;
    /**
     * Total pool units outstanding
     * @type {string}
     * @memberof PoolDetail
     */
    poolUnits?: string;
    /**
     * Two-way volume of all-time (in RUNE)
     * @type {string}
     * @memberof PoolDetail
     */
    poolVolume?: string;
    /**
     * Two-way volume in 24hrs (in RUNE)
     * @type {string}
     * @memberof PoolDetail
     */
    poolVolume24hr?: string;
    /**
     * Price of Asset (in RUNE).
     * @type {string}
     * @memberof PoolDetail
     */
    price?: string;
    /**
     * Total current Rune balance
     * @type {string}
     * @memberof PoolDetail
     */
    runeDepth?: string;
    /**
     * RUNE return on investment
     * @type {string}
     * @memberof PoolDetail
     */
    runeROI?: string;
    /**
     * Total RUNE staked
     * @type {string}
     * @memberof PoolDetail
     */
    runeStakedTotal?: string;
    /**
     * Number of ASSET->RUNE transactions
     * @type {string}
     * @memberof PoolDetail
     */
    sellAssetCount?: string;
    /**
     * Average buy Asset fee size for ASSET->RUNE (in RUNE)
     * @type {string}
     * @memberof PoolDetail
     */
    sellFeeAverage?: string;
    /**
     * Total fees (in RUNE)
     * @type {string}
     * @memberof PoolDetail
     */
    sellFeesTotal?: string;
    /**
     * Average trade slip for ASSET->RUNE in %
     * @type {string}
     * @memberof PoolDetail
     */
    sellSlipAverage?: string;
    /**
     * Average Asset sell transaction size (ASSET>RUNE) (in RUNE)
     * @type {string}
     * @memberof PoolDetail
     */
    sellTxAverage?: string;
    /**
     * Total Asset sell volume (ASSET>RUNE) (in RUNE).
     * @type {string}
     * @memberof PoolDetail
     */
    sellVolume?: string;
    /**
     * Number of stake transactions
     * @type {string}
     * @memberof PoolDetail
     */
    stakeTxCount?: string;
    /**
     * Number of unique stakers
     * @type {string}
     * @memberof PoolDetail
     */
    stakersCount?: string;
    /**
     * Number of stake & withdraw transactions
     * @type {string}
     * @memberof PoolDetail
     */
    stakingTxCount?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDetail
     */
    status?: PoolDetailStatusEnum;
    /**
     * Number of unique swappers interacting with pool
     * @type {string}
     * @memberof PoolDetail
     */
    swappersCount?: string;
    /**
     * Number of swapping transactions in the pool (buys and sells)
     * @type {string}
     * @memberof PoolDetail
     */
    swappingTxCount?: string;
    /**
     * Number of withdraw transactions
     * @type {string}
     * @memberof PoolDetail
     */
    withdrawTxCount?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PoolDetailStatusEnum {
    Bootstrapped = 'bootstrapped',
    Enabled = 'enabled',
    Disabled = 'disabled'
}

/**
 * 
 * @export
 * @interface StakersAddressData
 */
export interface StakersAddressData {
    /**
     * 
     * @type {Array<string>}
     * @memberof StakersAddressData
     */
    poolsArray?: Array<string>;
    /**
     * Total value of earnings (in RUNE) across all pools.
     * @type {string}
     * @memberof StakersAddressData
     */
    totalEarned?: string;
    /**
     * Average of all pool ROIs.
     * @type {string}
     * @memberof StakersAddressData
     */
    totalROI?: string;
    /**
     * Total staked (in RUNE) across all pools.
     * @type {string}
     * @memberof StakersAddressData
     */
    totalStaked?: string;
}
/**
 * 
 * @export
 * @interface StakersAssetData
 */
export interface StakersAssetData {
    /**
     * 
     * @type {string}
     * @memberof StakersAssetData
     */
    asset?: string;
    /**
     * Value of Assets earned from the pool.
     * @type {string}
     * @memberof StakersAssetData
     */
    assetEarned?: string;
    /**
     * ROI of the Asset side
     * @type {string}
     * @memberof StakersAssetData
     */
    assetROI?: string;
    /**
     * Amount of Assets staked.
     * @type {string}
     * @memberof StakersAssetData
     */
    assetStaked?: string;
    /**
     * 
     * @type {number}
     * @memberof StakersAssetData
     */
    dateFirstStaked?: number;
    /**
     * Total value of earnings (in RUNE).
     * @type {string}
     * @memberof StakersAssetData
     */
    poolEarned?: string;
    /**
     * Average ROI (in RUNE) of both sides
     * @type {string}
     * @memberof StakersAssetData
     */
    poolROI?: string;
    /**
     * RUNE value staked.
     * @type {string}
     * @memberof StakersAssetData
     */
    poolStaked?: string;
    /**
     * Value of RUNE earned from the pool.
     * @type {string}
     * @memberof StakersAssetData
     */
    runeEarned?: string;
    /**
     * ROI of the Rune side.
     * @type {string}
     * @memberof StakersAssetData
     */
    runeROI?: string;
    /**
     * Amount of RUNE staked.
     * @type {string}
     * @memberof StakersAssetData
     */
    runeStaked?: string;
    /**
     * Represents ownership of a pool.
     * @type {string}
     * @memberof StakersAssetData
     */
    stakeUnits?: string;
}
/**
 * 
 * @export
 * @interface StatsData
 */
export interface StatsData {
    /**
     * Daily active users (unique addresses interacting)
     * @type {string}
     * @memberof StatsData
     */
    dailyActiveUsers?: string;
    /**
     * Daily transactions
     * @type {string}
     * @memberof StatsData
     */
    dailyTx?: string;
    /**
     * Monthly active users
     * @type {string}
     * @memberof StatsData
     */
    monthlyActiveUsers?: string;
    /**
     * Monthly transactions
     * @type {string}
     * @memberof StatsData
     */
    monthlyTx?: string;
    /**
     * Number of active pools
     * @type {string}
     * @memberof StatsData
     */
    poolCount?: string;
    /**
     * Total buying transactions
     * @type {string}
     * @memberof StatsData
     */
    totalAssetBuys?: string;
    /**
     * Total selling transactions
     * @type {string}
     * @memberof StatsData
     */
    totalAssetSells?: string;
    /**
     * Total RUNE balances
     * @type {string}
     * @memberof StatsData
     */
    totalDepth?: string;
    /**
     * Total earned (in RUNE Value).
     * @type {string}
     * @memberof StatsData
     */
    totalEarned?: string;
    /**
     * Total staking transactions
     * @type {string}
     * @memberof StatsData
     */
    totalStakeTx?: string;
    /**
     * Total staked (in RUNE Value).
     * @type {string}
     * @memberof StatsData
     */
    totalStaked?: string;
    /**
     * Total transactions
     * @type {string}
     * @memberof StatsData
     */
    totalTx?: string;
    /**
     * Total unique swappers & stakers
     * @type {string}
     * @memberof StatsData
     */
    totalUsers?: string;
    /**
     * Total (in RUNE Value) of all assets swapped since start.
     * @type {string}
     * @memberof StatsData
     */
    totalVolume?: string;
    /**
     * Total (in RUNE Value) of all assets swapped in 24hrs
     * @type {string}
     * @memberof StatsData
     */
    totalVolume24hr?: string;
    /**
     * Total withdrawing transactions
     * @type {string}
     * @memberof StatsData
     */
    totalWithdrawTx?: string;
}
/**
 * 
 * @export
 * @interface ThorchainEndpoint
 */
export interface ThorchainEndpoint {
    /**
     * 
     * @type {string}
     * @memberof ThorchainEndpoint
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof ThorchainEndpoint
     */
    chain?: string;
    /**
     * 
     * @type {string}
     * @memberof ThorchainEndpoint
     */
    pubKey?: string;
}
/**
 * 
 * @export
 * @interface ThorchainEndpoints
 */
export interface ThorchainEndpoints {
    /**
     * 
     * @type {Array<ThorchainEndpoint>}
     * @memberof ThorchainEndpoints
     */
    current?: Array<ThorchainEndpoint>;
}
/**
 * 
 * @export
 * @interface Tx
 */
export interface Tx {
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    address?: string;
    /**
     * 
     * @type {Array<Coin>}
     * @memberof Tx
     */
    coins?: Array<Coin>;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    memo?: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    txID?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price. The logo is sourced from an internal database.
         * @summary Get Asset Information
         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetInfo(asset: string, options: any = {}): RequestArgs {
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling getAssetInfo.');
            }
            const localVarPath = `/v1/assets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return an array containing the event details
         * @summary Get events by address, asset or tx-id
         * @param {number} offset pagination offset
         * @param {number} limit pagination limit
         * @param {string} [address] Address of sender or recipient of any in/out tx in event
         * @param {string} [txid] ID of any in/out tx in event
         * @param {string} [asset] Any asset used in event (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents(offset: number, limit: number, address?: string, txid?: string, asset?: string, options: any = {}): RequestArgs {
            // verify required parameter 'offset' is not null or undefined
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling getEvents.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling getEvents.');
            }
            const localVarPath = `/v1/events`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }

            if (txid !== undefined) {
                localVarQueryParameter['txid'] = txid;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an object containing the health response of the API.
         * @summary Get Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealth(options: any = {}): RequestArgs {
            const localVarPath = `/v1/health`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array containing all the assets supported on BEPSwap pools
         * @summary Get Asset Pools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPools(options: any = {}): RequestArgs {
            const localVarPath = `/v1/pools`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an object containing all the pool data for that asset. All assets on BEPSwap have associated pools.
         * @summary Get Pools Data
         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoolsData(asset: string, options: any = {}): RequestArgs {
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling getPoolsData.');
            }
            const localVarPath = `/v1/pools/detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an object containing staking data for the specified staker and pool.
         * @summary Get Staker Pool Data
         * @param {string} address Unique staker address
         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersAddressAndAssetData(address: string, asset: string, options: any = {}): RequestArgs {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getStakersAddressAndAssetData.');
            }
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling getStakersAddressAndAssetData.');
            }
            const localVarPath = `/v1/stakers/{address}/pools`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array containing all the pools the staker is staking in.
         * @summary Get Staker Data
         * @param {string} address Unique staker address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersAddressData(address: string, options: any = {}): RequestArgs {
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new RequiredError('address','Required parameter address was null or undefined when calling getStakersAddressData.');
            }
            const localVarPath = `/v1/stakers/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array containing the addresses for all stakers.
         * @summary Get Stakers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersData(options: any = {}): RequestArgs {
            const localVarPath = `/v1/stakers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an object containing global stats for all pools and all transactions.
         * @summary Get Global Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStats(options: any = {}): RequestArgs {
            const localVarPath = `/v1/stats`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode
         * @summary Get the Proxied Pool Addresses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThorchainProxiedEndpoints(options: any = {}): RequestArgs {
            const localVarPath = `/v1/thorchain/pool_addresses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price. The logo is sourced from an internal database.
         * @summary Get Asset Information
         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetInfo(asset: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssetDetail>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getAssetInfo(asset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Return an array containing the event details
         * @summary Get events by address, asset or tx-id
         * @param {number} offset pagination offset
         * @param {number} limit pagination limit
         * @param {string} [address] Address of sender or recipient of any in/out tx in event
         * @param {string} [txid] ID of any in/out tx in event
         * @param {string} [asset] Any asset used in event (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents(offset: number, limit: number, address?: string, txid?: string, asset?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventDetails>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getEvents(offset, limit, address, txid, asset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an object containing the health response of the API.
         * @summary Get Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealth(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getHealth(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array containing all the assets supported on BEPSwap pools
         * @summary Get Asset Pools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPools(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPools(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an object containing all the pool data for that asset. All assets on BEPSwap have associated pools.
         * @summary Get Pools Data
         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoolsData(asset: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PoolDetail>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPoolsData(asset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an object containing staking data for the specified staker and pool.
         * @summary Get Staker Pool Data
         * @param {string} address Unique staker address
         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersAddressAndAssetData(address: string, asset: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StakersAssetData>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getStakersAddressAndAssetData(address, asset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array containing all the pools the staker is staking in.
         * @summary Get Staker Data
         * @param {string} address Unique staker address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersAddressData(address: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakersAddressData> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getStakersAddressData(address, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array containing the addresses for all stakers.
         * @summary Get Stakers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersData(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getStakersData(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an object containing global stats for all pools and all transactions.
         * @summary Get Global Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStats(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsData> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getStats(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode
         * @summary Get the Proxied Pool Addresses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThorchainProxiedEndpoints(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThorchainEndpoints> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getThorchainProxiedEndpoints(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price. The logo is sourced from an internal database.
         * @summary Get Asset Information
         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetInfo(asset: string, options?: any): AxiosPromise<Array<AssetDetail>> {
            return DefaultApiFp(configuration).getAssetInfo(asset, options)(axios, basePath);
        },
        /**
         * Return an array containing the event details
         * @summary Get events by address, asset or tx-id
         * @param {number} offset pagination offset
         * @param {number} limit pagination limit
         * @param {string} [address] Address of sender or recipient of any in/out tx in event
         * @param {string} [txid] ID of any in/out tx in event
         * @param {string} [asset] Any asset used in event (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents(offset: number, limit: number, address?: string, txid?: string, asset?: string, options?: any): AxiosPromise<Array<EventDetails>> {
            return DefaultApiFp(configuration).getEvents(offset, limit, address, txid, asset, options)(axios, basePath);
        },
        /**
         * Returns an object containing the health response of the API.
         * @summary Get Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealth(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).getHealth(options)(axios, basePath);
        },
        /**
         * Returns an array containing all the assets supported on BEPSwap pools
         * @summary Get Asset Pools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPools(options?: any): AxiosPromise<Array<string>> {
            return DefaultApiFp(configuration).getPools(options)(axios, basePath);
        },
        /**
         * Returns an object containing all the pool data for that asset. All assets on BEPSwap have associated pools.
         * @summary Get Pools Data
         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoolsData(asset: string, options?: any): AxiosPromise<Array<PoolDetail>> {
            return DefaultApiFp(configuration).getPoolsData(asset, options)(axios, basePath);
        },
        /**
         * Returns an object containing staking data for the specified staker and pool.
         * @summary Get Staker Pool Data
         * @param {string} address Unique staker address
         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersAddressAndAssetData(address: string, asset: string, options?: any): AxiosPromise<Array<StakersAssetData>> {
            return DefaultApiFp(configuration).getStakersAddressAndAssetData(address, asset, options)(axios, basePath);
        },
        /**
         * Returns an array containing all the pools the staker is staking in.
         * @summary Get Staker Data
         * @param {string} address Unique staker address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersAddressData(address: string, options?: any): AxiosPromise<StakersAddressData> {
            return DefaultApiFp(configuration).getStakersAddressData(address, options)(axios, basePath);
        },
        /**
         * Returns an array containing the addresses for all stakers.
         * @summary Get Stakers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStakersData(options?: any): AxiosPromise<Array<string>> {
            return DefaultApiFp(configuration).getStakersData(options)(axios, basePath);
        },
        /**
         * Returns an object containing global stats for all pools and all transactions.
         * @summary Get Global Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStats(options?: any): AxiosPromise<StatsData> {
            return DefaultApiFp(configuration).getStats(options)(axios, basePath);
        },
        /**
         * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode
         * @summary Get the Proxied Pool Addresses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThorchainProxiedEndpoints(options?: any): AxiosPromise<ThorchainEndpoints> {
            return DefaultApiFp(configuration).getThorchainProxiedEndpoints(options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price. The logo is sourced from an internal database.
     * @summary Get Asset Information
     * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAssetInfo(asset: string, options?: any) {
        return DefaultApiFp(this.configuration).getAssetInfo(asset, options)(this.axios, this.basePath);
    }

    /**
     * Return an array containing the event details
     * @summary Get events by address, asset or tx-id
     * @param {number} offset pagination offset
     * @param {number} limit pagination limit
     * @param {string} [address] Address of sender or recipient of any in/out tx in event
     * @param {string} [txid] ID of any in/out tx in event
     * @param {string} [asset] Any asset used in event (CHAIN.SYMBOL)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEvents(offset: number, limit: number, address?: string, txid?: string, asset?: string, options?: any) {
        return DefaultApiFp(this.configuration).getEvents(offset, limit, address, txid, asset, options)(this.axios, this.basePath);
    }

    /**
     * Returns an object containing the health response of the API.
     * @summary Get Health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHealth(options?: any) {
        return DefaultApiFp(this.configuration).getHealth(options)(this.axios, this.basePath);
    }

    /**
     * Returns an array containing all the assets supported on BEPSwap pools
     * @summary Get Asset Pools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPools(options?: any) {
        return DefaultApiFp(this.configuration).getPools(options)(this.axios, this.basePath);
    }

    /**
     * Returns an object containing all the pool data for that asset. All assets on BEPSwap have associated pools.
     * @summary Get Pools Data
     * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPoolsData(asset: string, options?: any) {
        return DefaultApiFp(this.configuration).getPoolsData(asset, options)(this.axios, this.basePath);
    }

    /**
     * Returns an object containing staking data for the specified staker and pool.
     * @summary Get Staker Pool Data
     * @param {string} address Unique staker address
     * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStakersAddressAndAssetData(address: string, asset: string, options?: any) {
        return DefaultApiFp(this.configuration).getStakersAddressAndAssetData(address, asset, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array containing all the pools the staker is staking in.
     * @summary Get Staker Data
     * @param {string} address Unique staker address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStakersAddressData(address: string, options?: any) {
        return DefaultApiFp(this.configuration).getStakersAddressData(address, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array containing the addresses for all stakers.
     * @summary Get Stakers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStakersData(options?: any) {
        return DefaultApiFp(this.configuration).getStakersData(options)(this.axios, this.basePath);
    }

    /**
     * Returns an object containing global stats for all pools and all transactions.
     * @summary Get Global Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStats(options?: any) {
        return DefaultApiFp(this.configuration).getStats(options)(this.axios, this.basePath);
    }

    /**
     * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode
     * @summary Get the Proxied Pool Addresses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getThorchainProxiedEndpoints(options?: any) {
        return DefaultApiFp(this.configuration).getThorchainProxiedEndpoints(options)(this.axios, this.basePath);
    }

}


/**
 * DocumentationApi - axios parameter creator
 * @export
 */
export const DocumentationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Swagger/openapi 3.0 specification generated documents.
         * @summary Get Documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocs(options: any = {}): RequestArgs {
            const localVarPath = `/v1/doc`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentationApi - functional programming interface
 * @export
 */
export const DocumentationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Swagger/openapi 3.0 specification generated documents.
         * @summary Get Documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocs(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DocumentationApiAxiosParamCreator(configuration).getDocs(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DocumentationApi - factory interface
 * @export
 */
export const DocumentationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Swagger/openapi 3.0 specification generated documents.
         * @summary Get Documents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocs(options?: any): AxiosPromise<void> {
            return DocumentationApiFp(configuration).getDocs(options)(axios, basePath);
        },
    };
};

/**
 * DocumentationApi - object-oriented interface
 * @export
 * @class DocumentationApi
 * @extends {BaseAPI}
 */
export class DocumentationApi extends BaseAPI {
    /**
     * Swagger/openapi 3.0 specification generated documents.
     * @summary Get Documents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentationApi
     */
    public getDocs(options?: any) {
        return DocumentationApiFp(this.configuration).getDocs(options)(this.axios, this.basePath);
    }

}


/**
 * SpecificationApi - axios parameter creator
 * @export
 */
export const SpecificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns human and machine readable swagger/openapi specification.
         * @summary Get Swagger
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwagger(options: any = {}): RequestArgs {
            const localVarPath = `/v1/swagger.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpecificationApi - functional programming interface
 * @export
 */
export const SpecificationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns human and machine readable swagger/openapi specification.
         * @summary Get Swagger
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwagger(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = SpecificationApiAxiosParamCreator(configuration).getSwagger(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SpecificationApi - factory interface
 * @export
 */
export const SpecificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns human and machine readable swagger/openapi specification.
         * @summary Get Swagger
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwagger(options?: any): AxiosPromise<void> {
            return SpecificationApiFp(configuration).getSwagger(options)(axios, basePath);
        },
    };
};

/**
 * SpecificationApi - object-oriented interface
 * @export
 * @class SpecificationApi
 * @extends {BaseAPI}
 */
export class SpecificationApi extends BaseAPI {
    /**
     * Returns human and machine readable swagger/openapi specification.
     * @summary Get Swagger
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecificationApi
     */
    public getSwagger(options?: any) {
        return SpecificationApiFp(this.configuration).getSwagger(options)(this.axios, this.basePath);
    }

}


